name: Build and Deploy QA

on:
  push:
    branches:
      - QA
    paths-ignore:
      - "**.md"
  workflow_dispatch:

jobs:
  codeguru-security:
    name: 🔒 CodeGuru Security Scan
    uses: ./.github/workflows/codeguru-security.yml

  build-deploy:
    name: 🚀 Build and Deploy QA
    needs: [codeguru-security]
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      actions: read
      security-events: write

    steps:
      - name: ⬇️ Checkout Repo
        uses: actions/checkout@v4
      - name: 💎 Set up Ruby 3.2.2
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true
      - name: 📦 Install Bundler
        run: gem install bundler
      - name: 📥 Install Dependencies
        run: |
          echo "Installing gem dependencies..."
          bundle install
      - name: 👮‍♂️ Run RuboCop
        run: |
          echo "Running bundle exec rubocop..."
          bundle exec rubocop
      - name: 🧪 Run Tests
        run: |
          echo "Running tests..."
          # Replace with your actual test command
          # e.g., bundle exec rspec
      - name: 🏗️ Build Artifact
        run: |
          echo "Building artifact..."
          zip -r deploy.zip . -x '*.git*' 'vendor/bundle/*' 'log/*' 'tmp/*' 'test/*' 'spec/*'
      - name: 🔄 Generate Version Label
        run: echo "VERSION_LABEL=${GITHUB_SHA}-$(($RANDOM % 100))" >> $GITHUB_ENV
      - name: 🚀 Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: Navigate-api
          environment_name: Navigate-qa-api-env
          version_label: ${{ env.VERSION_LABEL }}
          region: us-east-1
          deployment_package: deploy.zip
      - name: 🔍 Extract ClickUp Task ID from Branch Name
        id: extract_task_id
        run: |
          TASK_ID=$(echo "${GITHUB_HEAD_REF}" | sed -n 's/^CU-\([^_]*\).*/\1/p')
          echo "Task ID: $TASK_ID"
          echo "task_id=$TASK_ID" >> $GITHUB_ENV
      - name: 🚀 Move task to Shipped on ClickUp
        run: |
          if [ -z "${{ env.task_id }}" ]; then
            echo "No Task ID found, skipping ClickUp update."
            exit 0
          fi
          curl --request PUT \
            --url "https://api.clickup.com/api/v2/task/${{ env.task_id }}" \
            --header "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data '{"status": "READY FOR TEST (QA)"}'
